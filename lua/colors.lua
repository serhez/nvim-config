-- NOTE: You can discover all highlight groups by executing ':hi'
-- TODO: Redefine DAP UI colours (these ones: https://github.com/rcarriga/nvim-dap-ui/blob/master/lua/dapui/config/highlights.lua)

local M = {}

-- Catppuccin
vim.g.catppuccin_flavour = "frappe"

-- Github
vim.g.github_function_style = "italic"
vim.g.github_sidebars = { "qf", "vista_kind", "terminal", "packer" }

-- Tokyonight
vim.g.tokyonight_style = "storm"
vim.g.tokyonight_italic_functions = true
vim.g.tokyonight_sidebars = { "qf", "vista_kind", "terminal", "packer" }

-- Colorscheme
vim.g.nvcode_termcolors = 256
vim.g.syntax = true
vim.g.colors_name = "tokyonight"
vim.o.background = "dark"

-- Remove the tilde (~) after EOF
vim.cmd([[let &fcs='eob: ']])

-- Autogenerated highlight groups based on current colorscheme

local function fromhl(hl)
	local result = {}
	local list = vim.api.nvim_get_hl_by_name(hl, true)
	for k, v in pairs(list) do
		local status, res = pcall(string.format, "#%06x", v)
		if status then
			local name = k == "background" and "bg" or "fg"
			result[name] = res
		end
	end
	return result
end

local function term(num, default)
	local key = "terminal_color_" .. num
	return vim.g[key] and vim.g[key] or default
end

local function colors_from_theme()
	return {
		bg = fromhl("Normal").bg,
		fg = fromhl("Normal").fg,
		alt_bg = fromhl("CursorLine").bg,
		alt_fg = fromhl("CursorLine").bg,
		statusline_bg = fromhl("StatusLine").bg,
		statusline_fg = fromhl("StatusLine").fg,
		hint = fromhl("DiagnosticHint").fg or "#5E81AC",
		info = fromhl("DiagnosticInfo").fg or "#81A1C1",
		warn = fromhl("DiagnosticWarn").fg or "#EBCB8B",
		error = fromhl("DiagnosticError").fg or "#EC5F67",
		black = term(0, "#434C5E"),
		red = term(1, "#EC5F67"),
		green = term(2, "#8FBCBB"),
		yellow = term(3, "#EBCB8B"),
		blue = term(4, "#5E81AC"),
		magenta = term(5, "#B48EAD"),
		cyan = term(6, "#88C0D0"),
		white = term(7, "#ECEFF4"),
	}
end

-- This function must be called on an autocmd when the colorscheme is changed
-- After the function is called, UI components using these highlight groups must also be reloaded
M.gen_highlights = function()
	local c = colors_from_theme()
	M.colors = c

	M.groups = {
		-- Native UI
		FloatBorder = { fg = c.cyan, bg = c.statusline_bg },
		NormalFloat = { bg = c.statusline_bg },
		DiagnosticUnderlineError = { undercurl = true, sp = c.error },
		DiagnosticUnderlineWarn = { undercurl = true, sp = c.warn },
		DiagnosticUnderlineHint = { undercurl = true, sp = c.hint },
		DiagnosticUnderlineInfo = { undercurl = true, sp = c.info },

		-- End of buffer
		NonText = { default = true, link = "LineNr" },
		EndOfBuffer = { default = true, link = "Normal" },

		-- Word under cursor (vim-illuminate)
		IlluminatedWordRead = { bg = c.alt_bg, underline = true },
		IlluminatedWordText = { bg = c.alt_bg, underline = true },
		IlluminatedWordWrite = { bg = c.alt_bg, underline = true },

		-- Bufferline
		BufferLineBufferSelected = { default = true, bold = true },

		-- Feline
		FlnViBlack = { fg = c.white, bg = c.black, bold = true },
		FlnViRed = { fg = c.statusline_bg, bg = c.red, bold = true },
		FlnViGreen = { fg = c.statusline_bg, bg = c.green, bold = true },
		FlnViYellow = { fg = c.statusline_bg, bg = c.yellow, bold = true },
		FlnViBlue = { fg = c.statusline_bg, bg = c.blue, bold = true },
		FlnViMagenta = { fg = c.statusline_bg, bg = c.magenta, bold = true },
		FlnViCyan = { fg = c.statusline_bg, bg = c.cyan, bold = true },
		FlnViWhite = { fg = c.statusline_bg, bg = c.white, bold = true },

		FlnBlack = { fg = c.black, bg = c.white },
		FlnRed = { fg = c.red, bg = c.statusline_bg },
		FlnGreen = { fg = c.green, bg = c.statusline_bg },
		FlnYellow = { fg = c.yellow, bg = c.statusline_bg },
		FlnBlue = { fg = c.blue, bg = c.statusline_bg },
		FlnMagenta = { fg = c.magenta, bg = c.statusline_bg },
		FlnCyan = { fg = c.cyan, bg = c.statusline_bg },
		FlnWhite = { fg = c.white, bg = c.statusline_bg },

		FlnHint = { fg = c.hint, bg = c.statusline_bg },
		FlnInfo = { fg = c.info, bg = c.statusline_bg },
		FlnWarn = { fg = c.warn, bg = c.statusline_bg },
		FlnError = { fg = c.error, bg = c.statusline_bg },
		FlnStatus = { fg = c.statusline_fg, bg = c.statusline_bg, bold = true },

		FlnText = { fg = c.statusline_fg, bg = c.statusline_bg },
		FlnBoldText = { fg = c.statusline_fg, bg = c.statusline_bg, bold = true },
		FlnSep = { fg = c.statusline_fg, bg = c.statusline_bg },
		FlnGitBranch = { fg = c.statusline_fg, bg = c.statusline_bg },
		FlnNavic = { fg = c.statusline_fg, bg = c.statusline_bg },

		-- LSP
		LspFloatWinNormal = { bg = c.statusline_bg },
		LspFloatWinBorder = { fg = c.cyan, bg = c.statusline_bg },
		DiagnosticFloatingError = { fg = c.error, bg = c.statusline_bg },
		DiagnosticFloatingWarn = { fg = c.warn, bg = c.statusline_bg },
		DiagnosticFloatingInfo = { fg = c.info, bg = c.statusline_bg },
		DiagnosticFloatingHint = { fg = c.hint, bg = c.statusline_bg },

		-- Coverage
		CoverageCovered = { fg = c.bg, bg = c.green },
		CoverageUncovered = { fg = c.bg, bg = c.red },

		-- Telescope
		TelescopeBorder = { fg = c.cyan, bg = c.statusline_bg },
		TelescopePromptBorder = { fg = c.cyan, bg = c.statusline_bg },
		TelescopeResultsBorder = { fg = c.cyan, bg = c.statusline_bg },
		TelescopePreviewBorder = { fg = c.cyan, bg = c.statusline_bg },
		TelescopeNormal = { fg = c.fg, bg = c.statusline_bg },
		TelescopePromptNormal = { fg = c.fg, bg = c.statusline_bg },
		TelescopePromptPrefix = { fg = c.cyan, bg = c.statusline_bg },
		TelescopePromptCounter = { fg = c.fg, bg = c.statusline_bg },
		TelescopeSelection = { default = true, link = "Visual" },
		TelescopeSelectionCaret = { default = true, link = "Visual" },
		TelescopeMultiSelection = { default = true, link = "Visual" },

		-- Which key
		WhichKeyFloat = { bg = c.statusline_bg },

		-- BQF
		BqfPreviewBorder = { fg = c.cyan, bg = c.statusline_bg },
		BqfPreviewFloat = { bg = c.statusline_bg },

		-- Navic
		NavicIconsFile = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsModule = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsNamespace = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsPackage = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsClass = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsMethod = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsProperty = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsField = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsConstructor = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsEnum = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsInterface = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsFunction = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsVariable = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsConstant = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsString = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsNumber = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsBoolean = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsArray = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsObject = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsKey = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsNull = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsEnumMember = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsStruct = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsEvent = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsOperator = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicIconsTypeParameter = { default = true, bg = c.statusline_bg, fg = c.cyan },
		NavicText = { bg = c.statusline_bg, fg = c.statusline_fg },
		NavicSeparator = { bg = c.statusline_bg, fg = c.statusline_fg },

		-- CMP
		CmpItemMenu = { default = true, italic = true },

		-- Notify
		NotifyERRORBorder = { fg = c.cyan },
		NotifyWARNBorder = { fg = c.cyan },
		NotifyINFOBorder = { fg = c.cyan },
		NotifyDEBUGBorder = { fg = c.cyan },
		NotifyTRACEBorder = { fg = c.cyan },
		NotifyERRORIcon = { fg = c.error },
		NotifyWARNIcon = { fg = c.warn },
		NotifyINFOIcon = { fg = c.info },
		NotifyDEBUGIcon = { fg = c.magenta },
		NotifyTRACEIcon = { fg = c.hint },
		NotifyERRORTitle = { fg = c.error },
		NotifyWARNTitle = { fg = c.warn },
		NotifyINFOTitle = { fg = c.info },
		NotifyDEBUGTitle = { fg = c.magenta },
		NotifyTRACETitle = { fg = c.hint },
		NotifyERRORBody = { bg = c.statusline_bg },
		NotifyWARNBody = { bg = c.statusline_bg },
		NotifyINFOBody = { bg = c.statusline_bg },
		NotifyDEBUGBody = { bg = c.statusline_bg },
		NotifyTRACEBody = { bg = c.statusline_bg },
	}

	for k, v in pairs(M.groups) do
		vim.api.nvim_set_hl(0, k, v)
	end
end

M.gen_highlights()

return M
