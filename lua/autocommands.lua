local M = {}

function M.setup()
	require("utils").define_augroups({
		_general_settings = {
			-- Managed by smartyank plugin
			-- {
			--     "TextYankPost",
			--     "*",
			--     'lua require("vim.highlight").on_yank({higroup = "Search", timeout = 200})',
			-- },
			{
				"BufWinEnter",
				"*",
				"setlocal formatoptions-=c formatoptions-=r formatoptions-=o",
			},
			{
				"BufRead",
				"*",
				"setlocal formatoptions-=c formatoptions-=r formatoptions-=o",
			},
			{
				"BufNewFile",
				"*",
				"setlocal formatoptions-=c formatoptions-=r formatoptions-=o",
			},
			-- { "VimLeavePre", "*", "set title set titleold=" },
			-- { "VimLeave", "*", "set guicursor=a:ver100-blinkoff700-blinkon700" }, -- Restore alacritty cursor on exit
			{ "FileType", "qf", "set nobuflisted" },
		},

		-- Add a call to the setup() function (in their config) of any plugin using the autogenerated highlight groups
		_colors = {
			{
				"ColorScheme",
				"*",
				[[
                    lua require("highlights").setup();
                ]],
				-- FIX: Calling feline's setup in its config at this point crashes
				-- lua require("plugins.configs.feline");
				-- ]]
			},
		},

		-- _lsp = {
		-- 	{
		-- 		"CursorHold",
		-- 		"*",
		-- 		"lua vim.diagnostic.open_float()",
		-- 	},
		-- },

		_markdown = {
			{ "FileType", "markdown", "setlocal wrap" },
			{ "FileType", "markdown", "setlocal spell" },
		},

		_buffer_bindings = {
			{ "FileType", "floaterm", "nnoremap <silent> <buffer> q :q<CR>" },
		},
	})

	-- Close some filetypes with <q>
	vim.api.nvim_create_autocmd("FileType", {
		group = vim.api.nvim_create_augroup("close_with_q", { clear = true }),
		pattern = {
			"PlenaryTestPopup",
			"help",
			"lspinfo",
			"man",
			"notify",
			"qf",
			"query",
			"spectre_panel",
			"startuptime",
			"tsplayground",
			"neotest-output",
			"checkhealth",
			"neotest-summary",
			"neotest-output-panel",
		},
		callback = function(event)
			vim.bo[event.buf].buflisted = false
			vim.keymap.set("n", "q", "<cmd>close<cr>", { buffer = event.buf, silent = true })
		end,
	})

	-- From LazyVim
	-- Wrap and check for spell in text filetypes
	vim.api.nvim_create_autocmd("FileType", {
		group = vim.api.nvim_create_augroup("wrap_spell", { clear = true }),
		pattern = { "gitcommit", "markdown" },
		callback = function()
			vim.opt_local.wrap = true
			vim.opt_local.spell = true
		end,
	})

	-- From LazyVim
	-- Auto create dir when saving a file, in case some intermediate directory does not exist
	vim.api.nvim_create_autocmd({ "BufWritePre" }, {
		group = vim.api.nvim_create_augroup("auto_create_dir", { clear = true }),
		callback = function(event)
			if event.match:match("^%w%w+://") then
				return
			end
			local file = vim.loop.fs_realpath(event.match) or event.match
			vim.fn.mkdir(vim.fn.fnamemodify(file, ":p:h"), "p")
		end,
	})
end

return M
